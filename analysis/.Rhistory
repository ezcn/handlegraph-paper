require(tidyverse)
bdsg.prof <- read.delim('fixed_handle_profiling.cleaned.tsv.gz')
summary(bdsg.prof)
wideScreen <- function(howWide=Sys.getenv("COLUMNS")) {
  options(width=as.integer(howWide))
}
wideScreen(140)
bdsg.prof$graph.model <- factor(bdsg.prof$sglib.model,levels(bdsg.prof$sglib.model)[c(4,1:3,5)])
bdsg.prof$handles.per.sec <- bdsg.prof$graph.node.count / bdsg.prof$handle.enumeration.time
bdsg.prof$edges.per.sec <- bdsg.prof$graph.edge.count / bdsg.prof$edge.traversal.time
bdsg.prof$steps.per.sec <- bdsg.prof$graph.step.count / bdsg.prof$path.traversal.time
bdsg.prof.df <- pivot_longer(bdsg.prof, cols=c(handles.per.sec, edges.per.sec, steps.per.sec))
colnames(bdsg.prof.df){
colnames(bdsg.prof.df)
ggplot(bdsg.prof.df, aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
levels(bdsg.prof.df$name)
bdsg.prof.df$name
levels(as.factor(bdsg.prof.df$name))
bdsg.prof.df$names <- as.factor(bdsg.prof.df$names)
bdsg.prof.df$name <- as.factor(bdsg.prof.df$name)
levels(as.factor(bdsg.prof.df$name))
levels(bdsg.prof.df$name)
levels(bdsg.prof.df$name) <- c("edges/s", "handles/s", "steps/s")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
levels(bdsg.prof.df$name) <- c("edges per second", "handles per second", "steps per second")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y")
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10("graph sequence length") + scale_y_log10() + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10("graph sequence length") + scale_y_log10("") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point() + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggsave("iteration_per_second.pdf")
?geom_point
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=1) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.1) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.3) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggplot(subset(bdsg.prof.df, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.5) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggsave("iteration_per_second.pdf")
savehistory()
bdsg.prof.df.mem <- pivot_longer(bdsg.prof, cols=c(build.mem, load.mem))
bdsg.prof.df.mem$name <- as.factor(bdsg.prof.df.mem$name)
levels(bdsg.prof.df.mem$name) <- c("build memory (bytes)", "load memory (bytes)")
bdsg.prof.df.mem <- subset(bdsg.prof.df.mem, value>0) # remove a handful of failures
ggplot(subset(bdsg.prof.df.mem, value>0), aes(x=graph.seq.length, y=value, color=graph.model)) + geom_point(size=0.5) + scale_x_log10("graph sequence length") + scale_y_log10("") + scale_color_discrete("graph model") + facet_grid(name ~ ., scales = "free_y") + theme_bw()
ggsave("iteration_per_second.pdf")
summary(bdsg.prof)
length(uniq(bdsg.prof$graph.name))
e(bdsg.prof$graph.name))
length(unique(bdsg.prof$graph.name))
length(unique(as.factor(bdsg.prof$graph.name)))
?scale_color_gradientn
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,1,10,100))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,1,10,20))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("black", "blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(x=graph.avg.degree, y=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_y_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(1,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_color_gradientn(colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + scale_y_continuous(lim=c(0,3)) + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10(lim=c(1000,100000)) + scale_y_continuous(lim=c(0,3)) + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10(lim=c(1000,100000)) + scale_y_continuous(lim=c(1,3)) + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10() + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10("graph sequence length (bp)") + scale_y_continuous("average node degree") + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggsave("graph_summary.png")
ggsave("graph_summary.pdf")
savehistory()
mean
colnames(bdsg.prof)
with(subset(bdsg.prof, graph.name == 'og'), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.name == 'og'), mean(load.mem/graph.seq.length)))
with(subset(bdsg.prof, graph.name == 'og'), mean(load.mem/graph.seq.length))

nrow(subset(bdsg.prof, graph.name == 'og))
nrow(subset(bdsg.prof, graph.name == 'og)))
nrow(subset(bdsg.prof, graph.name == 'og'))
summary(bdsg.prof$graph.name)
colnames(bdsg.prof)
colnames(bdsg.prof$graph.model)
sumarry(bdsg.prof$graph.model)
summary(bdsg.prof$graph.model)
with(subset(bdsg.prof, graph.model == 'og' && graph.seq.length > 0), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == 'og' && graph.seq.length > 0), load.mem)
with(subset(bdsg.prof, graph.model == "og"), load.mem)
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 0), load.mem)
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 0), mean(load.mem))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 0), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 0), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length < 1e5), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), summary(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e6), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e4), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e6), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6 & graph.seq.length < 1e7), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e6 & graph.seq.length < 1e7), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), summary(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), summary(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), median(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.node.count))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
summary(bdsg.prof$graph.seq.length)
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e3 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(build.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "pg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "hg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "og" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.model == "vg" & graph.seq.length > 1e6 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
colnames(bdsg.prof$graph.model)
colnames(bdsg.prof)
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "vg" & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length > 1e5 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg" & graph.seq.length > 1e4 & graph.seq.length < 1e7), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "xg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "pg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "og"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "hg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 0 & graph.avg.path.depth < 1 & graph.model == "vg"), mean(load.mem/graph.seq.length))
ggplot(subset(bdsg.prof,graph.model=="vg"), aes(y=graph.avg.degree, x=graph.seq.length, color=graph.avg.path.depth, shape=graph.avg.path.depth==0)) + geom_point(alpha=I(1/3)) + scale_x_log10("graph sequence length (bp)") + scale_y_continuous("average node degree") + theme_bw() + theme_bw() + scale_shape_discrete("has paths") + scale_color_gradientn("path depth", colors=c("blue", "red", "yellow"), breaks=c(0,10,20,30,40,50,60))
ggplot(bdsg.prof, aes(x=graph.seq.length, y=build.mem, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + theme_bw()
ggplot(bdsg.prof, aes(x=graph.seq.length, y=load.mem, color=graph.model)) + geom_point() + scale_x_log10() + scale_y_log10() + theme_bw()
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "vg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "hg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "og"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "pg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth > 1 & graph.model == "xg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth == 0 & graph.model == "xg"), mean(load.mem/graph.seq.length))
with(subset(bdsg.prof, graph.avg.path.depth == 0 & graph.model == "vg"), mean(load.mem/graph.seq.length))
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__"))) %>% summarize
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize()
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__") %>% summarize()
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__") %>%
subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__"))
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(graph.name, 'hgsvc__sv-paper-figures__HGSVC__regions__'))
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(graph.name, "hgsvc__sv-paper-figures__HGSVC__regions__"))
bdsg.prof.hgsvc <- subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__"))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
-> % cat run.R | grep ^ggplot
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% summarize()

?summarize
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(bp.per=mean(load.mem/graph.seq.length))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length, build.bytes.per.bp=mean(load.mem/graph.seq.length)))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length, build.bytes.per.bp=mean(build.mem/graph.seq.length)))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length, build.bytes.per.bp=mean(build.mem/graph.seq.length)
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length)

subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length)
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(handle.enumeration.time/graph.node.count))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/graph.node.count))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0")) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("22", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem/graph.seq.length), build.bytes.per.bp=mean(build.mem/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("22", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("22", as.character(graph.name)) & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
savehistory()
subset(bdsg.prof, startsWith(as.character(graph.name), "human__pan.AF0") & grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))

subset(bdsg.prof, startsWith(as.character(graph.name), "hgsvc__sv-paper-figures__HGSVC__regions__chr") & !grepl("nopaths", as.character(graph.name)) & !grepl("mutilated", as.character(graph.name))) %>% group_by(graph.model) %>% summarize(load.bytes.per.bp=mean(load.mem*1000/graph.seq.length), build.bytes.per.bp=mean(build.mem*1000/graph.seq.length), handles.per.sec=mean(graph.node.count/handle.enumeration.time), edges.per.sec=mean(graph.edge.count/edge.traversal.time), steps.per.sec=mean(graph.step.count/path.traversal.time))
savehistory()
